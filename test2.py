import logging
import re
import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

import pandas as pd
import fitz  # PyMuPDF

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN_HERE' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '7328211477:AAEkRk9zhKC98UdJG86VeTQ5WeSLDzss8Kk'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_excel = State()
    waiting_for_pdf = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton("üìù –£–º–Ω–∞—è –ª–µ–Ω—Ç–∞ —Å–±–æ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ WB FBS", callback_data='process_orders')
    button2 = InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url='https://t.me/jeni_ll')  # –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    keyboard.add(button1)
    keyboard.add(button2)

    greeting = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
    )
    await message.answer(greeting, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'process_orders')
async def process_orders(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await Form.waiting_for_excel.set()
    await bot.send_message(callback_query.from_user.id, "1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ª–∏—Å—Ç –ø–æ–¥–±–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel‚ùóÔ∏è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞
@dp.message_handler(state=Form.waiting_for_excel, content_types=types.ContentType.DOCUMENT)
async def handle_excel(message: types.Message, state: FSMContext):
    if message.document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' or \
       message.document.mime_type == 'application/vnd.ms-excel':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        excel_file = f"excel_{message.from_user.id}.xlsx"
        await message.document.download(destination_file=excel_file)
        await state.update_data(excel_file=excel_file)
        await Form.waiting_for_pdf.set()
        await message.answer("2Ô∏è‚É£ –ü—Ä–∏—à–ª–∏ –º–Ω–µ –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF‚ùóÔ∏è")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è PDF-—Ñ–∞–π–ª–∞
@dp.message_handler(state=Form.waiting_for_pdf, content_types=types.ContentType.DOCUMENT)
async def handle_pdf(message: types.Message, state: FSMContext):
    if message.document.mime_type == 'application/pdf':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        pdf_file = f"pdf_{message.from_user.id}.pdf"
        await message.document.download(destination_file=pdf_file)
        await state.update_data(pdf_file=pdf_file)
        await message.answer("–ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏, —Å–µ–π—á–∞—Å —è —Å—Ñ–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª.")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data = await state.get_data()
        excel_path = user_data['excel_file']
        pdf_path = user_data['pdf_file']
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤
        output_pdf_path = f"modified_{message.from_user.id}.pdf"
        success = await process_files(excel_path, pdf_path, output_pdf_path)
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π PDF –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_document(message.from_user.id, open(output_pdf_path, 'rb'))
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.remove(excel_path)
            os.remove(pdf_path)
            os.remove(output_pdf_path)
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
async def process_files(excel_path, pdf_path, output_pdf_path):
    try:
        # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ—Ç –∂–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ, —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏

        # –ß—Ç–µ–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞
        data = pd.read_excel(excel_path, header=1)
        required_columns = ['–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è', '–§–æ—Ç–æ', '–ë—Ä–µ–Ω–¥', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–†–∞–∑–º–µ—Ä', '–¶–≤–µ—Ç', '–ê—Ä—Ç–∏–∫—É–ª', '–°—Ç–∏–∫–µ—Ä']
        data.columns = required_columns
        data['–°—Ç–∏–∫–µ—Ä'] = data['–°—Ç–∏–∫–µ—Ä'].astype(str).str.strip()

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–π
        sticker_to_article = data.set_index('–°—Ç–∏–∫–µ—Ä')['–ê—Ä—Ç–∏–∫—É–ª'].to_dict()
        grouped_data = data.groupby('–ê—Ä—Ç–∏–∫—É–ª').agg({
            '–°—Ç–∏–∫–µ—Ä': list,
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': 'count'
        }).reset_index()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-—Ñ–∞–π–ª–∞
        doc = fitz.open(pdf_path)
        sticker_page_map = {}
        number_regex = re.compile(r'\b\d+\b')

        for page_index, page in enumerate(doc):
            text = page.get_text()
            numbers = number_regex.findall(text)
            if len(numbers) >= 2:
                sticker_number = f"{numbers[-2]} {numbers[-1]}"
                sticker_page_map[sticker_number] = page_index
            else:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –Ω—É–∂–Ω—ã—Ö —á–∏—Å–µ–ª

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        ordered_page_indices = []
        group_insert_indices = []
        current_index = 0

        for row in grouped_data.itertuples():
            article = row.–ê—Ä—Ç–∏–∫—É–ª
            stickers = row.–°—Ç–∏–∫–µ—Ä
            count = row.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            group_insert_indices.append((current_index, article, count))
            for sticker in stickers:
                sticker = str(sticker).strip()
                if sticker in sticker_page_map:
                    ordered_page_indices.append(sticker_page_map[sticker])
                    current_index += 1

        if not ordered_page_indices:
            return False

        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
        doc.select(ordered_page_indices)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞
        font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"  # –û–±–Ω–æ–≤–∏—Ç–µ –ø—É—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        font_name = "DejaVuSans"
        font = fitz.Font(fontname=font_name, fontfile=font_path)

        # –í—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
        offset = 0
        for insert_index, article, count in group_insert_indices:
            insert_at = min(insert_index + offset, len(doc))
            new_page = doc.new_page(pno=insert_at, width=doc[0].rect.width, height=doc[0].rect.height)
            text = f"–ê—Ä—Ç–∏–∫—É–ª: {article}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}"
            new_page.insert_textbox(
                rect=new_page.rect,
                buffer=text,
                fontsize=12,
                fontname=font_name,
                fontfile=font_path,
                color=(0, 0, 0),
                align=1
            )
            offset += 1

        # –ó–∞–º–µ–Ω–∞ "WB" –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª
        MAX_ARTICLE_LENGTH = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
        for page_index, page in enumerate(doc):
            text = page.get_text()
            if "–ê—Ä—Ç–∏–∫—É–ª:" in text:
                continue
            numbers = number_regex.findall(text)
            if len(numbers) >= 2:
                sticker_number = f"{numbers[-2]} {numbers[-1]}"
                article = sticker_to_article.get(sticker_number)
                if article:
                    article_text = str(article)
                    if len(article_text) > MAX_ARTICLE_LENGTH:
                        article_text = article_text[:MAX_ARTICLE_LENGTH] + '...'
                    text_instances = page.search_for("WB")
                    if text_instances:
                        for inst in text_instances:
                            page.draw_rect(inst, color=(1, 1, 1), fill=(1, 1, 1))
                            expanded_inst = inst + (-1, -1, 1, 1)
                            page.insert_textbox(
                                rect=expanded_inst,
                                buffer=article_text,
                                fontsize=6,
                                fontname=font_name,
                                fontfile=font_path,
                                color=(0, 0, 0),
                                align=1,
                                rotate=90
                            )
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF
        doc.save(output_pdf_path)
        doc.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def unknown_message(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)