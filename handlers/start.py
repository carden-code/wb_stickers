import os
import logging
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from sqlalchemy import select
from aiogram.dispatcher import FSMContext

from bot_setup import dp, bot
from config import BASE_DIR, IMAGE_NAME
from database.image import get_image_file_id, save_image_file_id
from database.setup import AccessKey, User, get_session
from texts.start import START_TEXT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
async def grant_access_to_bot(message: types.Message, user_id: int):
    user_name = message.from_user.username if message.from_user.username else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    async with get_session() as session:
        result = await session.execute(select(User).filter(User.telegram_id == user_id))
        user = result.scalars().first()

        if not user:
            user = User(telegram_id=user_id, username=user_name)
            session.add(user)
            await session.commit()
            logger.info(f"New user created: {user_id}, username: {user_name}")

        keyboard_start = InlineKeyboardMarkup(row_width=1)
        keyboard_start.add(InlineKeyboardButton("üìù –£–º–Ω–∞—è –ª–µ–Ω—Ç–∞ —Å–±–æ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ WB FBS", callback_data='process_orders'))
        keyboard_start.add(InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url='https://t.me/jeni_ll'))
    
        file_id = await get_image_file_id(IMAGE_NAME)
        if file_id:
            await message.answer_photo(photo=file_id, caption=START_TEXT, reply_markup=keyboard_start, parse_mode='HTML')
        else:
            logo_path = os.path.join(BASE_DIR, IMAGE_NAME)
            with open(logo_path, 'rb') as logo:
                msg = await message.answer_photo(logo, caption=START_TEXT, reply_markup=keyboard_start, parse_mode='HTML')
                await save_image_file_id(IMAGE_NAME, msg.photo[-1].file_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()

    user_id = message.from_user.id

    start_param = message.get_args()

    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç.–µ. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å—Å—ã–ª–∫–µ
        if start_param:
            result = await session.execute(select(AccessKey).filter(AccessKey.key == start_param, AccessKey.used == False))
            access_key = result.scalars().first()

            if access_key:
                access_key.used = True
                await session.commit()

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
                user_name = message.from_user.username if message.from_user.username else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                user = User(telegram_id=user_id, username=user_name)
                session.add(user)
                await session.commit()
                logger.info(f"New user created: {user_id}, username: {user_name}")
            else:
                await message.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            result = await session.execute(select(User).filter(User.telegram_id == user_id))
            user = result.scalars().first()

            if not user:
                await message.answer("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return

    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
    await grant_access_to_bot(message, user_id)


@dp.callback_query_handler(lambda c: c.data == 'menu', state="*")
async def start(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()

    user_id = callback_query.from_user.id

    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(
            select(User).filter(User.telegram_id == user_id)
        )
        user = result.scalars().first()

        if not user:
            user_name = callback_query.from_user.username if callback_query.from_user.username else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            user = User(telegram_id=user_id, username=user_name)
            session.add(user)
            await session.commit()

        keyboard_start = InlineKeyboardMarkup(row_width=1)
        keyboard_start.add(InlineKeyboardButton("üìù –£–º–Ω–∞—è –ª–µ–Ω—Ç–∞ —Å–±–æ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ WB FBS", callback_data='process_orders'))
        keyboard_start.add(InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url='https://t.me/jeni_ll'))

        file_id = await get_image_file_id(IMAGE_NAME)
        if file_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–¥–∏–∞
            if callback_query.message.photo:
                await callback_query.message.edit_media(
                    InputMediaPhoto(media=file_id, caption=START_TEXT, parse_mode='HTML'),
                    reply_markup=keyboard_start
                )
            else:
                await callback_query.message.edit_reply_markup(reply_markup=None)
                await callback_query.message.answer_photo(
                    photo=file_id,
                    caption=START_TEXT,
                    reply_markup=keyboard_start,
                    parse_mode='HTML'
                )
        else:
            logo_path = os.path.join(BASE_DIR, IMAGE_NAME)
            with open(logo_path, 'rb') as logo:
                if callback_query.message.photo:
                    media = InputMediaPhoto(media=logo, caption=START_TEXT, parse_mode='HTML')
                    await callback_query.message.edit_media(media=media, reply_markup=keyboard_start)
                else:
                    await callback_query.message.edit_text(
                        text=START_TEXT,
                        reply_markup=keyboard_start,
                        parse_mode='HTML'
                    )

        await callback_query.answer()

# –£–¥–∞–ª—è—Ç—å –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state="*", content_types=types.ContentTypes.TEXT)
async def delete_message(message: types.Message, state: FSMContext):
    #–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start –∏ –Ω–µ /admin 
    if message.text != '/start' and message.text != '/admin':
        await message.delete()
